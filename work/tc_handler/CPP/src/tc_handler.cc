// Body file for function tc_handler
// Generated by TASTE on 2021-05-18 20:38:59
// You can edit this file, it will not be overwritten
// Provided interfaces : tc
// Required interfaces : 
// User-defined properties for this function:
//   |_ Taste::Active_Interfaces = any
//   |_ Taste::coordinates = 82623 55924 117378 77568
// Timers              : 

#include "tc_handler.h"
#include "tc_handler_state.h"
//#include <iostream>
#include "stdint.h"
#include "iostream"

// Define and use function state inside this context structure
// avoid defining global/static variable elsewhere
tc_handler_state ctxt_tc_handler;
/* User code: This file will not be overwritten by TASTE. */

/* User code: This file will not be overwritten by TASTE. */



const int NUMBER_OF_MESSAGES=24;
void sendToService(const asn1SccMessage*);

static int i = 0;
static asn1SccMessage* messageTable[NUMBER_OF_MESSAGES];

void tc_handler_startup()
{
    
    asn1SccMessage* tc0505 = new asn1SccMessage();
    tc0505->serviceType = 5;
    tc0505->messageType = 5;
    messageTable[0] = tc0505;
    
    asn1SccMessage* tc0506 = new asn1SccMessage();
    tc0506->serviceType = 5;
    tc0506->messageType = 6;
    messageTable[1] = tc0506;

    asn1SccMessage* tc0507 = new asn1SccMessage();
    tc0507->serviceType = 5;
    tc0507->messageType = 7;
    messageTable[2] = tc0507;
    
    asn1SccMessage* tc1901 = new asn1SccMessage();
    tc1901->serviceType = 19;
    tc1901->messageType = 1;
    messageTable[3] = tc1901;
    
    asn1SccMessage* tc1902 = new asn1SccMessage();
    tc1902->serviceType = 19;
    tc1902->messageType = 2;
    messageTable[4] = tc1902;
    
    asn1SccMessage* tc1903 = new asn1SccMessage();
    tc1903->serviceType = 19;
    tc1903->messageType = 3;
    messageTable[5] = tc1903;
    
    asn1SccMessage* tc1904 = new asn1SccMessage();
    tc1904->serviceType = 19;
    tc1904->messageType = 4;
    messageTable[6] = tc1904;
    
    asn1SccMessage* tc1905 = new asn1SccMessage();
    tc1905->serviceType = 19;
    tc1905->messageType = 5;
    messageTable[7] = tc1905;
    
    asn1SccMessage* tc1906 = new asn1SccMessage();
    tc1906->serviceType = 19;
    tc1906->messageType = 6;
    messageTable[8] = tc1906;
    
    asn1SccMessage* tc1908 = new asn1SccMessage();
    tc1908->serviceType = 19;
    tc1908->messageType = 8;
    messageTable[9] = tc1908;
    
    asn1SccMessage* tc1909 = new asn1SccMessage();
    tc1909->serviceType = 19;
    tc1909->messageType = 9;
    messageTable[10] = tc1909;
    
    asn1SccMessage* tc0801 = new asn1SccMessage();
    tc0801->serviceType = 8;
    tc0801->messageType = 1;
    messageTable[11] = tc0801;
    
    asn1SccMessage* tc1101 = new asn1SccMessage();
    tc1101->serviceType = 11;
    tc1101->messageType = 1;
    messageTable[12] = tc1101;
    
    asn1SccMessage* tc1102 = new asn1SccMessage();
    tc1102->serviceType = 11;
    tc1102->messageType = 2;
    messageTable[13] = tc1102;
    
    asn1SccMessage* tc1103 = new asn1SccMessage();
    tc1103->serviceType = 11;
    tc1103->messageType = 3;
    messageTable[14] = tc1103;
    
    asn1SccMessage* tc1104 = new asn1SccMessage();
    tc1104->serviceType = 11;
    tc1104->messageType = 4;
    messageTable[15] = tc1104;
    
    asn1SccMessage* tc1105 = new asn1SccMessage();
    tc1105->serviceType = 11;
    tc1105->messageType = 5;
    messageTable[16] = tc1105;
    
    asn1SccMessage* tc1107 = new asn1SccMessage();
    tc1107->serviceType = 11;
    tc1107->messageType = 7;
    messageTable[17] = tc1107;
    
    asn1SccMessage* tc1109 = new asn1SccMessage();
    tc1109->serviceType = 11;
    tc1109->messageType = 9;
    messageTable[18] = tc1109;
    
    asn1SccMessage* tc1112 = new asn1SccMessage();
    tc1112->serviceType = 11;
    tc1112->messageType = 12;
    messageTable[19] = tc1112;
    
    asn1SccMessage* tc1115 = new asn1SccMessage();
    tc1115->serviceType = 11;
    tc1115->messageType = 15;
    messageTable[20] = tc1115;
    
    asn1SccMessage* tc1116 = new asn1SccMessage();
    tc1116->serviceType = 11;
    tc1116->messageType = 16;
    messageTable[21] = tc1116;
    
    asn1SccMessage* tc2001 = new asn1SccMessage();
    tc2001->serviceType = 20;
    tc2001->messageType = 01;
    messageTable[22] = tc2001;
    
    asn1SccMessage* tc2003 = new asn1SccMessage();
    tc2003->serviceType = 20;
    tc2003->messageType = 03;
    messageTable[23] = tc2003;    
}

void tc_handler_PI_tc()
{
    if (i==NUMBER_OF_MESSAGES){
        i=0;
    }
    sendToService(messageTable[i]);
    i++;
}

void sendToService(const asn1SccMessage* message) {

	switch (message->serviceType) {
		case 5:       
			tc_handler_RI_TC05(message); // ST[05]
			break;
		case 8:
			tc_handler_RI_TC08(message); // ST[08]
			break;
		case 11:
			tc_handler_RI_TC11(message); // ST[11]
			break;
		case 19:
			tc_handler_RI_TC19(message); // ST[19]
			break;
		case 20:
			tc_handler_RI_TC20(message); // ST[20]
			break;
	}
}




