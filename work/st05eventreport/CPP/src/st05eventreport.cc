// Body file for function ST05EventReport
// Generated by TASTE on 2021-05-18 20:49:18
// You can edit this file, it will not be overwritten
// Provided interfaces : TC05
// Required interfaces : 
// User-defined properties for this function:
//   |_ Taste::Active_Interfaces = any
//   |_ Taste::coordinates = 151185 50237 191312 64771
// Timers              : 

#include "st05eventreport.h"
#include "st05eventreport_state.h"
//#include <iostream>

// Define and use function state inside this context structure
// avoid defining global/static variable elsewhere
st05eventreport_state ctxt_st05eventreport;

#include "bitset"
#include "vector"
#include "string"
#include "iostream"

#define  NUMBER_OF_EVENTS 7
#define ECSS_EVENT_DATA_AUXILIARY_MAX_SIZE 64

void listOfDisabledEventsReport();
void requestListOfDisabledEvents();
void disableReportGeneration(const asn1SccMessage*);
void highSeverityAnomalyReport(asn1SccEventOccured, std::string);
void mediumSeverityAnomalyReport(asn1SccEventOccured, std::string);

void lowSeverityAnomalyReport(asn1SccEventOccured, std::string);

void informativeEventReport(asn1SccEventOccured, std::string);


    std::bitset<NUMBER_OF_EVENTS> stateOfEvents;
    uint16_t lowSeverityReportCount = 0;
    uint16_t mediumSeverityReportCount = 0;
	uint16_t highSeverityReportCount = 0;

	// Variables that count the event occurences per severity level
	uint16_t lowSeverityEventCount = 0;
	uint16_t mediumSeverityEventCount = 0;
	uint16_t highSeverityEventCount = 0;

	uint16_t disabledEventsCount = 0;

	uint16_t lastLowSeverityReportID = 65535;
	uint16_t lastMediumSeverityReportID = 65535;
	uint16_t lastHighSeverityReportID = 65535;

void st05eventreport_startup()
{
    stateOfEvents.set();
}
void enableReportGeneration(const asn1SccMessage*);

void st05eventreport_PI_EventActionTC05(const asn1SccMessage *IN_message)
{
    	switch (IN_message->messageType) {
		case 5: enableReportGeneration(IN_message); // TC[5,5]
			break;
		case 6: disableReportGeneration(IN_message); // TC[5,6]
			break;
		case 7: requestListOfDisabledEvents(); // TC[5,7]
			break;
	}
}


void st05eventreport_PI_TC05(const asn1SccMessage *IN_message)
{
    	switch (IN_message->messageType) {
		case 5: 
            enableReportGeneration(IN_message); // TC[5,5]
			break;
		case 6: disableReportGeneration(IN_message); // TC[5,6]
			break;
		case 7: requestListOfDisabledEvents(); // TC[5,7]
			break;
	}
}


void listOfDisabledEventsReport() {
	// TM[5,8]
	asn1SccMessage report;
    report.packetType = asn1SccMessage_packetType(0);
    report.serviceType = 5;
    report.messageType = 8;

	uint16_t numberOfDisabledEvents = stateOfEvents.size() - stateOfEvents.count();
	report.data.arr[0] = numberOfDisabledEvents;
    uint16_t counter = 1;
	for (size_t i = 0; i < stateOfEvents.size(); i++) {
		if (not stateOfEvents[i]) {
			report.data.arr[counter]=i;
            counter++;
        }
	}
    std::cout << "TC[5,8]"<< std::endl;

	//storeMessage(report);
}

void requestListOfDisabledEvents() {

	listOfDisabledEventsReport();
    std::cout << "TC[5,7]"<< std::endl;

}

void disableReportGeneration(const asn1SccMessage* message) {
	uint16_t length = message->data.arr[0];
    asn1SccEventOccured eventID[length];
	for (uint16_t i = 0; i < length; i++) {
		eventID[i] = static_cast<asn1SccEventOccured>(message->data.arr[i+1]);
	}
	if (length <= NUMBER_OF_EVENTS) {
		for (uint16_t i = 0; i < length; i++) {
			stateOfEvents[static_cast<uint16_t>(eventID[i])] = false;
		}
	}
	disabledEventsCount = stateOfEvents.size() - stateOfEvents.count();
    std::cout << "TC[5,6]"<< std::endl;
}


void enableReportGeneration(const asn1SccMessage* message) {
	uint16_t length = message->data.arr[0];
    asn1SccEventOccured eventID[length];
	for (uint16_t i = 0; i < length; i++) {
		eventID[i] = static_cast<asn1SccEventOccured>(message->data.arr[i+1]);
	}
	if (length <= NUMBER_OF_EVENTS) {
		for (uint16_t i = 0; i < length; i++) {
			stateOfEvents[static_cast<uint16_t>(eventID[i])] = true;
		}
	}
	disabledEventsCount = stateOfEvents.size() - stateOfEvents.count();
    std::cout << "TC[5,5]"<< std::endl;

}

void highSeverityAnomalyReport(asn1SccEventOccured eventID, std::string data) {
	highSeverityEventCount++;
	// TM[5,4]
	if (stateOfEvents[static_cast<uint16_t>(eventID)]) {
		highSeverityReportCount++;
        asn1SccMessage report;
        report.packetType = asn1SccMessage_packetType(0);
        report.serviceType = 5;
        report.messageType = 4;
		report.data.arr[0] = static_cast<uint16_t>(eventID);
        std::vector<uint8_t> myVector(data.begin(), data.end());
        uint8_t *p = &myVector[0];
        for (uint16_t i = 1; i<ECSS_EVENT_DATA_AUXILIARY_MAX_SIZE+1; i++){
            report.data.arr[i] = p[i];
        }		
        lastHighSeverityReportID = static_cast<uint16_t>(eventID);

		//storeMessage(report);
	}
}
void mediumSeverityAnomalyReport(asn1SccEventOccured eventID, std::string data) {
	mediumSeverityEventCount++;
	// TM[5,3]
	if (stateOfEvents[static_cast<uint16_t>(eventID)]) {
		mediumSeverityReportCount++;
        asn1SccMessage report;
        report.packetType = asn1SccMessage_packetType(0);
        report.serviceType = 5;
        report.messageType = 3;
		report.data.arr[0] = static_cast<uint16_t>(eventID);
        std::vector<uint8_t> myVector(data.begin(), data.end());
        uint8_t *p = &myVector[0];
        for (uint16_t i = 1; i<ECSS_EVENT_DATA_AUXILIARY_MAX_SIZE+1; i++){
            report.data.arr[i] = p[i];
        }
        lastMediumSeverityReportID = static_cast<uint16_t>(eventID);

		//storeMessage(report);
	}
}

void lowSeverityAnomalyReport(asn1SccEventOccured eventID, std::string data) {
	lowSeverityEventCount++;
	// TM[5,2]

	if (stateOfEvents[static_cast<uint16_t>(eventID)]) {
	asn1SccMessage report;
	lowSeverityReportCount++;
        report.packetType = asn1SccMessage_packetType(0);
        report.serviceType = 5;
        report.messageType = 2;
		report.data.arr[0] = static_cast<uint16_t>(eventID);
        std::vector<uint8_t> myVector(data.begin(), data.end());
        uint8_t *p = &myVector[0];
        for (uint16_t i = 1; i<ECSS_EVENT_DATA_AUXILIARY_MAX_SIZE+1; i++){
            report.data.arr[i] = p[i];
        }
		lastLowSeverityReportID = static_cast<uint16_t>(eventID);

		//storeMessage(report);
	}
}

void informativeEventReport(asn1SccEventOccured eventID, std::string data) {
	// TM[5,1]
	if (stateOfEvents[static_cast<uint16_t>(eventID)]) {
	asn1SccMessage report;
        report.packetType = asn1SccMessage_packetType(0);
        report.serviceType = 5;
        report.messageType = 1;
	report.data.arr[0] = static_cast<uint16_t>(eventID);
        std::vector<uint8_t> myVector(data.begin(), data.end());
        uint8_t *p = &myVector[0];
        for (uint16_t i = 1; i<ECSS_EVENT_DATA_AUXILIARY_MAX_SIZE+1; i++){
            report.data.arr[i] = p[i];
        }
		//storeMessage(report);
	}
}
