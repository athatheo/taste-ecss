#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccMyInteger;


flag asn1SccMyInteger_Equal(const asn1SccMyInteger* pVal1, const asn1SccMyInteger* pVal2);

void asn1SccMyInteger_Initialize(asn1SccMyInteger* pVal);

#define ERR_MYINTEGER		1  /**/
flag asn1SccMyInteger_IsConstraintValid(const asn1SccMyInteger* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MYINTEGER		2  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ENCODING        14

flag asn1SccMyInteger_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		3  /**/
flag asn1SccMyInteger_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINTEGER		4  /**/
#define asn1SccMyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccMyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        14

flag asn1SccMyInteger_ACN_Encode(const asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		5  /**/
flag asn1SccMyInteger_ACN_Decode(asn1SccMyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccUInt8;


flag asn1SccUInt8_Equal(const asn1SccUInt8* pVal1, const asn1SccUInt8* pVal2);

void asn1SccUInt8_Initialize(asn1SccUInt8* pVal);

#define ERR_UINT8		8  /**/
flag asn1SccUInt8_IsConstraintValid(const asn1SccUInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_UINT8		9  /**/
#define asn1SccUInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccUInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccUInt8_Encode(const asn1SccUInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT8		10  /**/
flag asn1SccUInt8_Decode(asn1SccUInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT8		11  /**/
#define asn1SccUInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccUInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccUInt8_ACN_Encode(const asn1SccUInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT8		12  /**/
flag asn1SccUInt8_ACN_Decode(asn1SccUInt8* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccUInt8 arr[100];
} asn1SccPacket;

flag asn1SccPacket_Equal(const asn1SccPacket* pVal1, const asn1SccPacket* pVal2);

void asn1SccPacket_Initialize(asn1SccPacket* pVal);

#define ERR_PACKET		36  /**/
#define ERR_PACKET_ELM_2		29  /**/
flag asn1SccPacket_IsConstraintValid(const asn1SccPacket* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PACKET		37  /**/
#define ERR_UPER_ENCODE_PACKET_ELM_2		30  /**/
#define asn1SccPacket_REQUIRED_BYTES_FOR_ENCODING       100 
#define asn1SccPacket_REQUIRED_BITS_FOR_ENCODING        800

flag asn1SccPacket_Encode(const asn1SccPacket* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PACKET		38  /**/
#define ERR_UPER_DECODE_PACKET_ELM_2		31  /**/
flag asn1SccPacket_Decode(asn1SccPacket* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PACKET		39  /**/
#define ERR_ACN_ENCODE_PACKET_ELM_2		32  /**/
#define asn1SccPacket_REQUIRED_BYTES_FOR_ACN_ENCODING       100 
#define asn1SccPacket_REQUIRED_BITS_FOR_ACN_ENCODING        800

flag asn1SccPacket_ACN_Encode(const asn1SccPacket* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKET		40  /**/
#define ERR_ACN_DECODE_PACKET_ELM_2		33  /**/
flag asn1SccPacket_ACN_Decode(asn1SccPacket* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccUInt16;


flag asn1SccUInt16_Equal(const asn1SccUInt16* pVal1, const asn1SccUInt16* pVal2);

void asn1SccUInt16_Initialize(asn1SccUInt16* pVal);

#define ERR_UINT16		15  /**/
flag asn1SccUInt16_IsConstraintValid(const asn1SccUInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_UINT16		16  /**/
#define asn1SccUInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccUInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccUInt16_Encode(const asn1SccUInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_UINT16		17  /**/
flag asn1SccUInt16_Decode(asn1SccUInt16* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_UINT16		18  /**/
#define asn1SccUInt16_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define asn1SccUInt16_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag asn1SccUInt16_ACN_Encode(const asn1SccUInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_UINT16		19  /**/
flag asn1SccUInt16_ACN_Decode(asn1SccUInt16* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMessage --------------------------------------------*/
typedef enum {
    asn1Scctm = 0,
    asn1Scctc = 1
} asn1SccMessage_packetType;

// please use the following macros to avoid breaking code.
#define asn1SccMessage_packetType_tm asn1Scctm
#define asn1SccMessage_packetType_tc asn1Scctc


typedef struct {
    
    asn1SccUInt16 arr[1024];
} asn1SccMessage_data;
typedef struct {
    asn1SccMessage_packetType packetType;
    asn1SccUInt8 serviceType;
    asn1SccUInt8 messageType;
    asn1SccUInt16 applicationId;
    asn1SccUInt16 messageTypeCounter;
    asn1SccUInt16 packetSequenceCount;
    asn1SccUInt16 dataSize;
    asn1SccMessage_data data;

} asn1SccMessage;

flag asn1SccMessage_packetType_Equal(const asn1SccMessage_packetType* pVal1, const asn1SccMessage_packetType* pVal2);

flag asn1SccMessage_data_Equal(const asn1SccMessage_data* pVal1, const asn1SccMessage_data* pVal2);

flag asn1SccMessage_Equal(const asn1SccMessage* pVal1, const asn1SccMessage* pVal2);

void asn1SccMessage_packetType_Initialize(asn1SccMessage_packetType* pVal);
void asn1SccMessage_data_Initialize(asn1SccMessage_data* pVal);
void asn1SccMessage_Initialize(asn1SccMessage* pVal);

#define ERR_MESSAGE		155  /**/
#define ERR_MESSAGE_PACKETTYPE		43  /**/
#define ERR_MESSAGE_SERVICETYPE_2		57  /**/
#define ERR_MESSAGE_MESSAGETYPE_2		71  /**/
#define ERR_MESSAGE_APPLICATIONID_2		85  /**/
#define ERR_MESSAGE_MESSAGETYPECOUNTER_2		99  /**/
#define ERR_MESSAGE_PACKETSEQUENCECOUNT_2		113  /**/
#define ERR_MESSAGE_DATASIZE_2		127  /**/
#define ERR_MESSAGE_DATA		148  /**/
#define ERR_MESSAGE_DATA_ELM_2		141  /**/
flag asn1SccMessage_IsConstraintValid(const asn1SccMessage* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MESSAGE		156  /**/
#define ERR_UPER_ENCODE_MESSAGE_PACKETTYPE		44  /**/
#define ERR_UPER_ENCODE_MESSAGE_SERVICETYPE_2		58  /**/
#define ERR_UPER_ENCODE_MESSAGE_MESSAGETYPE_2		72  /**/
#define ERR_UPER_ENCODE_MESSAGE_APPLICATIONID_2		86  /**/
#define ERR_UPER_ENCODE_MESSAGE_MESSAGETYPECOUNTER_2		100  /**/
#define ERR_UPER_ENCODE_MESSAGE_PACKETSEQUENCECOUNT_2		114  /**/
#define ERR_UPER_ENCODE_MESSAGE_DATASIZE_2		128  /**/
#define ERR_UPER_ENCODE_MESSAGE_DATA		149  /**/
#define ERR_UPER_ENCODE_MESSAGE_DATA_ELM_2		142  /**/
#define asn1SccMessage_REQUIRED_BYTES_FOR_ENCODING       2059 
#define asn1SccMessage_REQUIRED_BITS_FOR_ENCODING        16465

flag asn1SccMessage_Encode(const asn1SccMessage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MESSAGE		157  /**/
#define ERR_UPER_DECODE_MESSAGE_PACKETTYPE		45  /**/
#define ERR_UPER_DECODE_MESSAGE_SERVICETYPE_2		59  /**/
#define ERR_UPER_DECODE_MESSAGE_MESSAGETYPE_2		73  /**/
#define ERR_UPER_DECODE_MESSAGE_APPLICATIONID_2		87  /**/
#define ERR_UPER_DECODE_MESSAGE_MESSAGETYPECOUNTER_2		101  /**/
#define ERR_UPER_DECODE_MESSAGE_PACKETSEQUENCECOUNT_2		115  /**/
#define ERR_UPER_DECODE_MESSAGE_DATASIZE_2		129  /**/
#define ERR_UPER_DECODE_MESSAGE_DATA		150  /**/
#define ERR_UPER_DECODE_MESSAGE_DATA_ELM_2		143  /**/
flag asn1SccMessage_Decode(asn1SccMessage* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MESSAGE		158  /**/
#define ERR_ACN_ENCODE_MESSAGE_PACKETTYPE		46  /**/
#define ERR_ACN_ENCODE_MESSAGE_SERVICETYPE_2		60  /**/
#define ERR_ACN_ENCODE_MESSAGE_MESSAGETYPE_2		74  /**/
#define ERR_ACN_ENCODE_MESSAGE_APPLICATIONID_2		88  /**/
#define ERR_ACN_ENCODE_MESSAGE_MESSAGETYPECOUNTER_2		102  /**/
#define ERR_ACN_ENCODE_MESSAGE_PACKETSEQUENCECOUNT_2		116  /**/
#define ERR_ACN_ENCODE_MESSAGE_DATASIZE_2		130  /**/
#define ERR_ACN_ENCODE_MESSAGE_DATA		151  /**/
#define ERR_ACN_ENCODE_MESSAGE_DATA_ELM_2		144  /**/
#define asn1SccMessage_REQUIRED_BYTES_FOR_ACN_ENCODING       2059 
#define asn1SccMessage_REQUIRED_BITS_FOR_ACN_ENCODING        16465

flag asn1SccMessage_ACN_Encode(const asn1SccMessage* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MESSAGE		159  /**/
#define ERR_ACN_DECODE_MESSAGE_PACKETTYPE		47  /**/
#define ERR_ACN_DECODE_MESSAGE_SERVICETYPE_2		61  /**/
#define ERR_ACN_DECODE_MESSAGE_MESSAGETYPE_2		75  /**/
#define ERR_ACN_DECODE_MESSAGE_APPLICATIONID_2		89  /**/
#define ERR_ACN_DECODE_MESSAGE_MESSAGETYPECOUNTER_2		103  /**/
#define ERR_ACN_DECODE_MESSAGE_PACKETSEQUENCECOUNT_2		117  /**/
#define ERR_ACN_DECODE_MESSAGE_DATASIZE_2		131  /**/
#define ERR_ACN_DECODE_MESSAGE_DATA		152  /**/
#define ERR_ACN_DECODE_MESSAGE_DATA_ELM_2		145  /**/
flag asn1SccMessage_ACN_Decode(asn1SccMessage* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccinformativeUnknownEvent = 0,
    asn1SccwwdgReset = 1,
    asn1SccassertionFail = 2,
    asn1SccmCUStart = 3,
    asn1ScclowSeverityUnknownEvent = 4,
    asn1SccmediumSeverityUnknownEvent = 5,
    asn1ScchighSeverityUnknownEvent = 6,
    asn1SccfailedStartOfExecution = 7
} asn1SccEventOccured;

// please use the following macros to avoid breaking code.
#define asn1SccEventOccured_informativeUnknownEvent asn1SccinformativeUnknownEvent
#define asn1SccEventOccured_wwdgReset asn1SccwwdgReset
#define asn1SccEventOccured_assertionFail asn1SccassertionFail
#define asn1SccEventOccured_mCUStart asn1SccmCUStart
#define asn1SccEventOccured_lowSeverityUnknownEvent asn1ScclowSeverityUnknownEvent
#define asn1SccEventOccured_mediumSeverityUnknownEvent asn1SccmediumSeverityUnknownEvent
#define asn1SccEventOccured_highSeverityUnknownEvent asn1ScchighSeverityUnknownEvent
#define asn1SccEventOccured_failedStartOfExecution asn1SccfailedStartOfExecution

flag asn1SccEventOccured_Equal(const asn1SccEventOccured* pVal1, const asn1SccEventOccured* pVal2);

void asn1SccEventOccured_Initialize(asn1SccEventOccured* pVal);

#define ERR_EVENTOCCURED		162  /**/
flag asn1SccEventOccured_IsConstraintValid(const asn1SccEventOccured* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_EVENTOCCURED		163  /**/
#define asn1SccEventOccured_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccEventOccured_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccEventOccured_Encode(const asn1SccEventOccured* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_EVENTOCCURED		164  /**/
flag asn1SccEventOccured_Decode(asn1SccEventOccured* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_EVENTOCCURED		165  /**/
#define asn1SccEventOccured_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccEventOccured_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccEventOccured_ACN_Encode(const asn1SccEventOccured* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_EVENTOCCURED		166  /**/
flag asn1SccEventOccured_ACN_Decode(asn1SccEventOccured* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccunknownAcceptanceError = 0,
    asn1SccmessageTooShort = 1,
    asn1ScctooManyBitsRead = 2,
    asn1SccstringTooShort = 4,
    asn1SccunacceptableMessage = 5
} asn1SccAcceptanceErrorOccured;

// please use the following macros to avoid breaking code.
#define asn1SccAcceptanceErrorOccured_unknownAcceptanceError asn1SccunknownAcceptanceError
#define asn1SccAcceptanceErrorOccured_messageTooShort asn1SccmessageTooShort
#define asn1SccAcceptanceErrorOccured_tooManyBitsRead asn1ScctooManyBitsRead
#define asn1SccAcceptanceErrorOccured_stringTooShort asn1SccstringTooShort
#define asn1SccAcceptanceErrorOccured_unacceptableMessage asn1SccunacceptableMessage

flag asn1SccAcceptanceErrorOccured_Equal(const asn1SccAcceptanceErrorOccured* pVal1, const asn1SccAcceptanceErrorOccured* pVal2);

void asn1SccAcceptanceErrorOccured_Initialize(asn1SccAcceptanceErrorOccured* pVal);

#define ERR_ACCEPTANCEERROROCCURED		169  /**/
flag asn1SccAcceptanceErrorOccured_IsConstraintValid(const asn1SccAcceptanceErrorOccured* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ACCEPTANCEERROROCCURED		170  /**/
#define asn1SccAcceptanceErrorOccured_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccAcceptanceErrorOccured_REQUIRED_BITS_FOR_ENCODING        3

flag asn1SccAcceptanceErrorOccured_Encode(const asn1SccAcceptanceErrorOccured* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACCEPTANCEERROROCCURED		171  /**/
flag asn1SccAcceptanceErrorOccured_Decode(asn1SccAcceptanceErrorOccured* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACCEPTANCEERROROCCURED		172  /**/
#define asn1SccAcceptanceErrorOccured_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccAcceptanceErrorOccured_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag asn1SccAcceptanceErrorOccured_ACN_Encode(const asn1SccAcceptanceErrorOccured* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACCEPTANCEERROROCCURED		173  /**/
flag asn1SccAcceptanceErrorOccured_ACN_Decode(asn1SccAcceptanceErrorOccured* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccunknownRoutingError = 0
} asn1SccRoutingErrorType;

// please use the following macros to avoid breaking code.
#define asn1SccRoutingErrorType_unknownRoutingError asn1SccunknownRoutingError

flag asn1SccRoutingErrorType_Equal(const asn1SccRoutingErrorType* pVal1, const asn1SccRoutingErrorType* pVal2);

void asn1SccRoutingErrorType_Initialize(asn1SccRoutingErrorType* pVal);

#define ERR_ROUTINGERRORTYPE		176  /**/
flag asn1SccRoutingErrorType_IsConstraintValid(const asn1SccRoutingErrorType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ROUTINGERRORTYPE		177  /**/
#define asn1SccRoutingErrorType_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccRoutingErrorType_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccRoutingErrorType_Encode(const asn1SccRoutingErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ROUTINGERRORTYPE		178  /**/
flag asn1SccRoutingErrorType_Decode(asn1SccRoutingErrorType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ROUTINGERRORTYPE		179  /**/
#define asn1SccRoutingErrorType_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccRoutingErrorType_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccRoutingErrorType_ACN_Encode(const asn1SccRoutingErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ROUTINGERRORTYPE		180  /**/
flag asn1SccRoutingErrorType_ACN_Decode(asn1SccRoutingErrorType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccunknownExecutionStartError = 0,
    asn1ScceventActionDefinitionIDExistsError = 1,
    asn1ScceventActionDeleteEnabledDefinitionError = 2,
    asn1ScceventActionUnknownEventDefinitionError = 3,
    asn1ScceventActionUnknownEventActionDefinitionIDError = 4,
    asn1SccsubServiceExecutionStartError = 5,
    asn1SccinstructionExecutionStartError = 6,
    asn1SccsetNonExistingParameter = 7,
    asn1SccgetNonExistingParameter = 8
} asn1SccExecutionStartErrorType;

// please use the following macros to avoid breaking code.
#define asn1SccExecutionStartErrorType_unknownExecutionStartError asn1SccunknownExecutionStartError
#define asn1SccExecutionStartErrorType_eventActionDefinitionIDExistsError asn1ScceventActionDefinitionIDExistsError
#define asn1SccExecutionStartErrorType_eventActionDeleteEnabledDefinitionError asn1ScceventActionDeleteEnabledDefinitionError
#define asn1SccExecutionStartErrorType_eventActionUnknownEventDefinitionError asn1ScceventActionUnknownEventDefinitionError
#define asn1SccExecutionStartErrorType_eventActionUnknownEventActionDefinitionIDError asn1ScceventActionUnknownEventActionDefinitionIDError
#define asn1SccExecutionStartErrorType_subServiceExecutionStartError asn1SccsubServiceExecutionStartError
#define asn1SccExecutionStartErrorType_instructionExecutionStartError asn1SccinstructionExecutionStartError
#define asn1SccExecutionStartErrorType_setNonExistingParameter asn1SccsetNonExistingParameter
#define asn1SccExecutionStartErrorType_getNonExistingParameter asn1SccgetNonExistingParameter

flag asn1SccExecutionStartErrorType_Equal(const asn1SccExecutionStartErrorType* pVal1, const asn1SccExecutionStartErrorType* pVal2);

void asn1SccExecutionStartErrorType_Initialize(asn1SccExecutionStartErrorType* pVal);

#define ERR_EXECUTIONSTARTERRORTYPE		183  /**/
flag asn1SccExecutionStartErrorType_IsConstraintValid(const asn1SccExecutionStartErrorType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_EXECUTIONSTARTERRORTYPE		184  /**/
#define asn1SccExecutionStartErrorType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccExecutionStartErrorType_REQUIRED_BITS_FOR_ENCODING        4

flag asn1SccExecutionStartErrorType_Encode(const asn1SccExecutionStartErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_EXECUTIONSTARTERRORTYPE		185  /**/
flag asn1SccExecutionStartErrorType_Decode(asn1SccExecutionStartErrorType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_EXECUTIONSTARTERRORTYPE		186  /**/
#define asn1SccExecutionStartErrorType_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccExecutionStartErrorType_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag asn1SccExecutionStartErrorType_ACN_Encode(const asn1SccExecutionStartErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_EXECUTIONSTARTERRORTYPE		187  /**/
flag asn1SccExecutionStartErrorType_ACN_Decode(asn1SccExecutionStartErrorType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccunknownExecutionProgressError = 0
} asn1SccExecutionProgressErrorType;

// please use the following macros to avoid breaking code.
#define asn1SccExecutionProgressErrorType_unknownExecutionProgressError asn1SccunknownExecutionProgressError

flag asn1SccExecutionProgressErrorType_Equal(const asn1SccExecutionProgressErrorType* pVal1, const asn1SccExecutionProgressErrorType* pVal2);

void asn1SccExecutionProgressErrorType_Initialize(asn1SccExecutionProgressErrorType* pVal);

#define ERR_EXECUTIONPROGRESSERRORTYPE		190  /**/
flag asn1SccExecutionProgressErrorType_IsConstraintValid(const asn1SccExecutionProgressErrorType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_EXECUTIONPROGRESSERRORTYPE		191  /**/
#define asn1SccExecutionProgressErrorType_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccExecutionProgressErrorType_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccExecutionProgressErrorType_Encode(const asn1SccExecutionProgressErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_EXECUTIONPROGRESSERRORTYPE		192  /**/
flag asn1SccExecutionProgressErrorType_Decode(asn1SccExecutionProgressErrorType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_EXECUTIONPROGRESSERRORTYPE		193  /**/
#define asn1SccExecutionProgressErrorType_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccExecutionProgressErrorType_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccExecutionProgressErrorType_ACN_Encode(const asn1SccExecutionProgressErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_EXECUTIONPROGRESSERRORTYPE		194  /**/
flag asn1SccExecutionProgressErrorType_ACN_Decode(asn1SccExecutionProgressErrorType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1SccunknownExecutionCompletionError = 0,
    asn1SccchecksumFailed = 1,
    asn1SccaddressOutOfRange = 2
} asn1SccExecutionCompletionErrorType;

// please use the following macros to avoid breaking code.
#define asn1SccExecutionCompletionErrorType_unknownExecutionCompletionError asn1SccunknownExecutionCompletionError
#define asn1SccExecutionCompletionErrorType_checksumFailed asn1SccchecksumFailed
#define asn1SccExecutionCompletionErrorType_addressOutOfRange asn1SccaddressOutOfRange

flag asn1SccExecutionCompletionErrorType_Equal(const asn1SccExecutionCompletionErrorType* pVal1, const asn1SccExecutionCompletionErrorType* pVal2);

void asn1SccExecutionCompletionErrorType_Initialize(asn1SccExecutionCompletionErrorType* pVal);

#define ERR_EXECUTIONCOMPLETIONERRORTYPE		197  /**/
flag asn1SccExecutionCompletionErrorType_IsConstraintValid(const asn1SccExecutionCompletionErrorType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_EXECUTIONCOMPLETIONERRORTYPE		198  /**/
#define asn1SccExecutionCompletionErrorType_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccExecutionCompletionErrorType_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccExecutionCompletionErrorType_Encode(const asn1SccExecutionCompletionErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_EXECUTIONCOMPLETIONERRORTYPE		199  /**/
flag asn1SccExecutionCompletionErrorType_Decode(asn1SccExecutionCompletionErrorType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_EXECUTIONCOMPLETIONERRORTYPE		200  /**/
#define asn1SccExecutionCompletionErrorType_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccExecutionCompletionErrorType_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag asn1SccExecutionCompletionErrorType_ACN_Encode(const asn1SccExecutionCompletionErrorType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_EXECUTIONCOMPLETIONERRORTYPE		201  /**/
flag asn1SccExecutionCompletionErrorType_ACN_Decode(asn1SccExecutionCompletionErrorType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


flag asn1SccT_Int32_Equal(const asn1SccT_Int32* pVal1, const asn1SccT_Int32* pVal2);

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		204  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		205  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		206  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		207  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_Int32_ACN_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		208  /**/
flag asn1SccT_Int32_ACN_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


flag asn1SccT_UInt32_Equal(const asn1SccT_UInt32* pVal1, const asn1SccT_UInt32* pVal2);

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		211  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		212  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		213  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		214  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag asn1SccT_UInt32_ACN_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		215  /**/
flag asn1SccT_UInt32_ACN_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


flag asn1SccT_Int8_Equal(const asn1SccT_Int8* pVal1, const asn1SccT_Int8* pVal2);

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		218  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		219  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		220  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		221  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_Int8_ACN_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		222  /**/
flag asn1SccT_Int8_ACN_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


flag asn1SccT_UInt8_Equal(const asn1SccT_UInt8* pVal1, const asn1SccT_UInt8* pVal2);

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		225  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		226  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		227  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		228  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccT_UInt8_ACN_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		229  /**/
flag asn1SccT_UInt8_ACN_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


flag asn1SccT_Boolean_Equal(const asn1SccT_Boolean* pVal1, const asn1SccT_Boolean* pVal2);

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		232  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		233  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		234  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		235  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag asn1SccT_Boolean_ACN_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		236  /**/
flag asn1SccT_Boolean_ACN_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

flag asn1SccT_Null_Record_Equal(const asn1SccT_Null_Record* pVal1, const asn1SccT_Null_Record* pVal2);

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define ERR_T_NULL_RECORD		239  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag asn1SccT_Null_Record_ACN_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_ACN_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
